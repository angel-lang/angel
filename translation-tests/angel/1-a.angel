// Constant declarations.
let constantWithEverything: I8 = 1
let constantWithoutType = 1
let constantWithoutValue: I8

// Variable declarations.
var variableWithEverything: I8 = 1
var variableWithoutType = 1
var variableWithoutValue: I8

// Assignments.
constantWithoutValue = 1    // Constant didn't have value. Assignment is allowed.
variableWithEverything = 2
variableWithoutType = 2
variableWithoutValue = 2
variableWithoutValue = 3

// Char
let charWithEverything: Char = 'a'
let charWithoutType = 'b'

// F32
let f32WithEverything: F32 = 10.20
let f32WithoutType = 120.1

// F64
let f64WithEverything: F64 = 10.20
let f64WithoutType = 340282370000000000808640304032688192896.1

// Vector type
let emptyVectorWithoutType = []
let emptyVectorWithType: [I8] = []
let vectorWithoutType = [1, 260]
let vectorWithType: [I8] = [1]

// Vector add
let l = [1, 2, 3] + [4]

// Dict type
let emptyDictWithoutType = [:]
let emptyDictWithType: [String: I8] = [:]
let dictWithoutType = ["a": 1, "c": 0, "b": 3]
let dictWithType: [String: I8] = ["a": 1]

// Dict subscript
print(dictWithoutType["a"])

// Dict length
print(dictWithoutType.length)

// Optional type
let someOptional = Optional.None
let optionalName: String? = Optional.Some("John")
if optionalName == Optional.None:
    print("No")
else:
    print("YES")

// If let
if let realName = optionalName:
    print(realName)
else:
    print("No name")

// While let
fun getN(i: I8) -> I8?:
    if i <= 3:
        return Optional.Some(i)
    return Optional.None

var lol = 0
while let n = getN(lol):
    print(n)
    lol += 1

// String.split
let names = "John,Mike,Kale"
let parts = names.split(',')

let name = "Mike"

// String subscript
print(name[1])

// String.length
let length = name.length

// Vector subscript
print(parts[2])

var age: I8 = 20
age = 21

print(name)
print(age)

if True:
    print(True)
elif age == 21:
    print(True)
else:
    print(False)

while age < 30:
    if age == 25:
        print("HA-HA")
    age += 1


// Structs
struct Email:
    userName: String
    domain: String

    init(userName: String, domain: String):
        self.userName = userName
        self.domain = domain

    init():
        self.userName = "test"
        self.domain = "mail.com"


struct User:
    firstName: String
    lastName: String
    email: Email
    isAdmin: Bool = False

    fun makeAdmin():
        self.isAdmin = True


let basicEmail = Email()
print(basicEmail.userName)
print(basicEmail.domain)

let advancedEmail = Email("john", "mail.com")
print(advancedEmail.userName)
print(advancedEmail.domain)

var user = User("John", "Smith", advancedEmail)
print(user.email.userName)
print(user.isAdmin)
user.makeAdmin()
print(user.isAdmin)


struct Stack(A):
    data: [A]

    init(data: [A]):
        self.data = data

    fun push(element: A) -> A:
        self.data.append(element)
        return element

    fun depth -> U64:
        return self.data.length

let stack = Stack([1, 2, 3])
let element = stack.data[2]
let same = stack.push(4)
print(stack.data.length)
print(stack.depth())


// Algebraics
algebraic Color:
    struct Red:
        data: I8

        init(data: I8):
            self.data = data

        fun getEstimation() -> String:
            if self.data < 10:
                return "Small"
            return "Big"

    struct Blue:
        data: I8

        init(data: I8):
            self.data = data

    struct Green:
        data: I8

        init(data: I8):
            self.data = data

    fun word() -> String:
        return "word"

var color1 = Color.Red(120)
let color2: Color = Color.Blue(0)
print(color2.data)
let colorData = color2.data
let estimation = color1.getEstimation()
print(estimation)
color1 = Color.Green(10)
print(color1.data)
print(color1.word())


// Interfaces
interface Beautiful:
    beautifulValue: String

    fun showBeauty()


interface Cool is Beautiful


struct Person is Cool:
    firstName: String
    secondName: String
    age: U8
    beautifulValue: String

    fun showBeauty():
        print(self.beautifulValue)

// Builtin interfaces
struct V is ArithmeticObject, Object:
    first: I8
    second: I8

    fun __add__(other: V) -> V:
        return V(self.first + other.first, self.second + other.second)

    fun __sub__(other: V) -> V:
        return V(self.first - other.first, self.second - other.second)

    fun __mul__(other: V) -> V:
        return V(self.first * other.first, self.second * other.second)

    fun __div__(other: V) -> V:
        return V(self.first / other.first, self.second / other.second)

    fun report():
        print(self.first as String + " " + self.second as String)

let v1 = V(1, 2)
let v2 = V(2, 2)
let v3 = v1 + v2
let v4 = v1 - v2
let v5 = v1 * v2
let v6 = v1 / v2
v3.report()
v4.report()
v5.report()
v6.report()


// For loop
//// Vector
for element in [1, 2, 3]:
    print(element)

//// String
for element in "John":
    print(element)
